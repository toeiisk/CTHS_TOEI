[{"B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\index.js":"1","B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\App.js":"2","B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\reportWebVitals.js":"3","B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\components\\GlobalStyles.js":"4","B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\routes.js":"5","B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Homepage.js":"6","B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Diagnosis.js":"7","B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Report.js":"8","B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Patients\\Create.js":"9","B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Treatment.js":"10","B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Admins\\Detail.js":"11","B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Login.js":"12","B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\components\\Navbar\\Main\\index.js":"13","B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Register.js":"14","B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Admins\\Creat.js":"15","B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Patients\\Patients.js":"16","B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Patients\\Detail.js":"17","B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Admins\\User.js":"18","B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\components\\Navbar\\index.js":"19","B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\components\\Navbar\\Topbar.js":"20","B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Patients\\Patients-form.js":"21","B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Admins\\User-form.js":"22","B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Admins\\GraphQL\\Querie.js":"23","B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Patients\\GraphQL\\Querie.js":"24","B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\components\\Navbar\\Sidebar.js":"25","B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Patients\\GraphQL\\Mutation.js":"26","B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Admins\\GraphQL\\Mutation.js":"27","B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\MulitiSelect.jsx":"28","B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Treatment\\Create.js":"29","B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Medicine\\Prescription\\Prescription.js":"30","B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Medicine\\DrugStore\\Create.js":"31","B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Medicine\\DrugStore\\Medicine.js":"32","B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Medicine\\DrugStore\\Medicine-form.js":"33","B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Medicine\\DrugStore\\graphql\\Mutation.js":"34","B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Medicine\\DrugStore\\Detail.js":"35","B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Medicine\\DrugStore\\graphql\\Queries.js":"36"},{"size":771,"mtime":1616923556586,"results":"37","hashOfConfig":"38"},{"size":419,"mtime":1617363768217,"results":"39","hashOfConfig":"38"},{"size":362,"mtime":1615819086000,"results":"40","hashOfConfig":"38"},{"size":778,"mtime":1617383016245,"results":"41","hashOfConfig":"38"},{"size":2280,"mtime":1617626554451,"results":"42","hashOfConfig":"38"},{"size":673,"mtime":1617190525509,"results":"43","hashOfConfig":"38"},{"size":627,"mtime":1617120644869,"results":"44","hashOfConfig":"38"},{"size":618,"mtime":1617120663680,"results":"45","hashOfConfig":"38"},{"size":1890,"mtime":1617618288510,"results":"46","hashOfConfig":"38"},{"size":627,"mtime":1617120676509,"results":"47","hashOfConfig":"38"},{"size":2103,"mtime":1617618288456,"results":"48","hashOfConfig":"38"},{"size":4205,"mtime":1616947726218,"results":"49","hashOfConfig":"38"},{"size":1031,"mtime":1617366299555,"results":"50","hashOfConfig":"38"},{"size":4115,"mtime":1616947797428,"results":"51","hashOfConfig":"38"},{"size":1861,"mtime":1617618288449,"results":"52","hashOfConfig":"38"},{"size":2946,"mtime":1617625821552,"results":"53","hashOfConfig":"38"},{"size":2790,"mtime":1617618288517,"results":"54","hashOfConfig":"38"},{"size":3367,"mtime":1617618288476,"results":"55","hashOfConfig":"38"},{"size":1371,"mtime":1617364840803,"results":"56","hashOfConfig":"38"},{"size":1521,"mtime":1617379433171,"results":"57","hashOfConfig":"38"},{"size":25982,"mtime":1617618288524,"results":"58","hashOfConfig":"38"},{"size":17017,"mtime":1617618288468,"results":"59","hashOfConfig":"38"},{"size":458,"mtime":1617434701544,"results":"60","hashOfConfig":"38"},{"size":678,"mtime":1617434701645,"results":"61","hashOfConfig":"38"},{"size":7827,"mtime":1617638366382,"results":"62","hashOfConfig":"38"},{"size":872,"mtime":1617618288523,"results":"63","hashOfConfig":"38"},{"size":657,"mtime":1617434701538,"results":"64","hashOfConfig":"38"},{"size":878,"mtime":1617434701533,"results":"65","hashOfConfig":"38"},{"size":3291,"mtime":1617618288531,"results":"66","hashOfConfig":"38"},{"size":662,"mtime":1617618288503,"results":"67","hashOfConfig":"38"},{"size":1857,"mtime":1617618288484,"results":"68","hashOfConfig":"38"},{"size":3396,"mtime":1617638121472,"results":"69","hashOfConfig":"38"},{"size":8742,"mtime":1617637869487,"results":"70","hashOfConfig":"38"},{"size":548,"mtime":1617635983623,"results":"71","hashOfConfig":"38"},{"size":2313,"mtime":1617630064674,"results":"72","hashOfConfig":"38"},{"size":379,"mtime":1617628961473,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"1r73zrm",{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"76"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"76"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"76"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"76"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"76"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"76"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"76"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"146","messages":"147","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\index.js",[],["154","155"],"B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\App.js",[],"B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\reportWebVitals.js",[],"B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\components\\GlobalStyles.js",[],"B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\routes.js",[],"B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Homepage.js",[],"B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Diagnosis.js",[],"B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Report.js",[],"B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Patients\\Create.js",[],"B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Treatment.js",[],"B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Admins\\Detail.js",[],"B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Login.js",["156"],"import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Logouser from \"../img/user.png\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    height: \"100vh\",\r\n  },\r\n  image: {\r\n    backgroundImage: \"url(https://i.imgur.com/u9flexs.jpg)\",\r\n    backgroundRepeat: \"no-repeat\",\r\n    backgroundSize: \"cover\",\r\n    backgroundPosition: \"center\",\r\n  },\r\n  paper: {\r\n    margin: theme.spacing(8, 4),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\",\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n    backgroundColor: \"#5780f7\",\r\n    color: \"white\",\r\n    padding: 8\r\n  },\r\n  logo: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n}));\r\n\r\nexport default function SignInSide() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grid container component=\"main\" className={classes.root}>\r\n      <fullWidthClassName />\r\n      <CssBaseline />\r\n      <Grid item xs={false} sm={4} md={6} className={classes.image} />\r\n      <Grid\r\n        item\r\n        xs={12}\r\n        sm={8}\r\n        md={6}\r\n        component={Paper}\r\n        square\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          justifyContent: \"center\",\r\n        }}\r\n      >\r\n        <div className={classes.paper}>\r\n          <div className={classes.logo}>\r\n            <img src={Logouser} style={{ width: \"80%\", height: \"auto\" }} />\r\n          </div>\r\n          <Typography component=\"h1\" variant=\"h5\" style={{margin: 30}}>\r\n            Clinic Treatment History System\r\n          </Typography>\r\n          <form className={classes.form} noValidate>\r\n            <TextField\r\n              variant=\"filled\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"email\"\r\n              label=\"Email Address\"\r\n              name=\"email\"\r\n              autoComplete=\"email\"\r\n              autoFocus\r\n              // style={{ boxShadow: \"5px 10px #777\" }}\r\n            />\r\n            <TextField\r\n              variant=\"filled\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              name=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              id=\"password\"\r\n              autoComplete=\"current-password\"\r\n            />\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              className={classes.submit}\r\n            >\r\n              <Typography component=\"subtitle1\" variant=\"subtitle1\">\r\n                Login\r\n              </Typography>\r\n            </Button>\r\n            <Grid container>\r\n              <Grid item xs>\r\n                <FormControlLabel\r\n                  control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n                  label=\"Remember me\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <Link href=\"/register\" variant=\"body2\">\r\n                  <Typography\r\n                    component=\"subtitle1\"\r\n                    variant=\"subtitle1\"\r\n                    style={{ marginRight: 10 }}\r\n                  >\r\n                    Don't Have an Account?\r\n                  </Typography>\r\n                </Link>\r\n              </Grid>\r\n              <Grid item>\r\n                <Link href=\"#\" variant=\"body2\">\r\n                  <Typography component=\"subtitle1\" variant=\"subtitle1\">\r\n                    Forgot Password?\r\n                  </Typography>\r\n                </Link>\r\n              </Grid>\r\n            </Grid>\r\n          </form>\r\n        </div>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\components\\Navbar\\Main\\index.js",[],"B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Register.js",["157"],"import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Logouser from \"../img/user.png\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(10),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n    backgroundColor: \"#ecb79c\",\r\n    color: \"white\",\r\n  },\r\n  logo: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n}));\r\n\r\nexport default function Register() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <div className={classes.logo}>\r\n          <img src={Logouser} style={{ width: \"80%\", height: \"auto\" }} />\r\n        </div>\r\n        <Typography component=\"h1\" variant=\"h5\" style={{ margin: 30 }}>\r\n          Register\r\n        </Typography>\r\n        <form className={classes.form} noValidate>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                autoComplete=\"fname\"\r\n                name=\"firstName\"\r\n                variant=\"filled\"\r\n                required\r\n                fullWidth\r\n                id=\"firstName\"\r\n                label=\"First Name\"\r\n                autoFocus\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"filled\"\r\n                required\r\n                fullWidth\r\n                id=\"lastName\"\r\n                label=\"Last Name\"\r\n                name=\"lastName\"\r\n                autoComplete=\"lname\"\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"filled\"\r\n                required\r\n                fullWidth\r\n                id=\"email\"\r\n                label=\"Email Address\"\r\n                name=\"email\"\r\n                autoComplete=\"email\"\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"filled\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"filled\"\r\n                required\r\n                fullWidth\r\n                name=\"confirm password\"\r\n                label=\"Confirm Password\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n          >\r\n            <Typography component=\"subtitle1\" variant=\"subtitle1\">\r\n              Register\r\n            </Typography>\r\n          </Button>\r\n          <Grid container justify=\"flex-end\">\r\n            <Grid item>\r\n              <Link href=\"/login\" variant=\"body2\">\r\n                <Typography component=\"subtitle1\" variant=\"subtitle1\">\r\n                  Already have an account? Sign in\r\n                </Typography>\r\n              </Link>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n","B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Admins\\Creat.js",[],"B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Patients\\Patients.js",[],"B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Patients\\Detail.js",[],"B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Admins\\User.js",[],"B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\components\\Navbar\\index.js",[],"B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\components\\Navbar\\Topbar.js",["158"],"import React from 'react';\nimport { AppBar, Hidden, Toolbar, makeStyles, IconButton, Box, Typography } from '@material-ui/core';\nimport Icon from '../../img/logo.png';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\n// icon\nimport { IconContext } from 'react-icons';\nimport { GiHamburgerMenu } from 'react-icons/gi';\n\nconst useStyles = makeStyles(() => ({\n\troot: {\n\t\tbackgroundColor: '#FFF',\n\t\tpadding: 10,\n\t},\n}));\n\nconst Layout = ({ className, onMobileNavOpen, ...rest }) => {\n\tconst classes = useStyles();\n\n\treturn (\n\t\t<AppBar className={clsx(classes.root, className)} {...rest}>\n\t\t\t<Toolbar>\n\t\t\t\t<Link to=\"/app/homepage\" style={{ textDecoration: 'none' }}>\n\t\t\t\t\t<div\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\t\t\tjustifyContent: 'center',\n\t\t\t\t\t\t\talignItems: 'center',\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<img src={Icon} alt=\"icon\" style={{ height: 70, width: 70 }} />\n\t\t\t\t\t\t<Typography\n\t\t\t\t\t\t\tvariant=\"h6\"\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tfontWeight: 'bold',\n\t\t\t\t\t\t\t\ttextTransform: 'uppercase',\n\t\t\t\t\t\t\t\tcolor: '#000',\n\t\t\t\t\t\t\t\tmarginLeft: 15,\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tClinic Treatment History\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t</div>\n\t\t\t\t</Link>\n\t\t\t\t<Box flexGrow={1} />\n\t\t\t\t<Hidden lgUp>\n\t\t\t\t\t<IconContext.Provider value={{ color: 'red', size: '30' }}>\n\t\t\t\t\t\t<GiHamburgerMenu onClick={onMobileNavOpen} />\n\t\t\t\t\t</IconContext.Provider>\n\t\t\t\t</Hidden>\n\t\t\t</Toolbar>\n\t\t</AppBar>\n\t);\n};\n\nLayout.propTypes = {\n\tclassName: PropTypes.string,\n\tonMobileNavOpen: PropTypes.func,\n};\n\nexport default Layout;\n","B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Patients\\Patients-form.js",["159","160","161","162","163","164","165","166","167","168","169"],"import React, { useCallback, useEffect, useState } from 'react'\r\nimport {\r\n    Grid,\r\n    Typography,\r\n    MenuItem,\r\n    RadioGroup,\r\n    FormControlLabel,\r\n    FormControl,\r\n    FormLabel,\r\n    Button,\r\n    Chip,\r\n    NativeSelect,\r\n    InputBase,\r\n    InputLabel,\r\n} from '@material-ui/core';\r\nimport { Form, Field } from 'react-final-form';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport { CountryRegionData } from \"react-country-region-selector\";\r\nimport { TextField, Radio, Select } from 'final-form-material-ui';\r\nimport MultiSelect from \"../../MulitiSelect\";\r\nimport \"../../App.css\"\r\nimport { ADD_PATIENT } from './GraphQL/Mutation'\r\nimport { useMutation } from '@apollo/client';\r\nimport { GET_PATIENTS } from './GraphQL/Querie'\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport moment from 'moment';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            width: '25ch',\r\n        },\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n        maxWidth: 300,\r\n    },\r\n    chips: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n    },\r\n    chip: {\r\n        margin: 2,\r\n    },\r\n}));\r\n\r\nconst BootstrapInput = withStyles((theme) => ({\r\n    root: {\r\n        'label + &': {\r\n            marginTop: theme.spacing(3),\r\n        },\r\n    },\r\n    input: {\r\n        borderRadius: 4,\r\n        position: 'relative',\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '1px solid #ced4da',\r\n        fontSize: 16,\r\n        width: \"100%\",\r\n        padding: '10px 26px 10px 12px',\r\n        transition: theme.transitions.create(['border-color', 'box-shadow']),\r\n        fontFamily: [\r\n            '-apple-system',\r\n            'BlinkMacSystemFont',\r\n            '\"Segoe UI\"',\r\n            'Roboto',\r\n            '\"Helvetica Neue\"',\r\n            'Arial',\r\n            'sans-serif',\r\n            '\"Apple Color Emoji\"',\r\n            '\"Segoe UI Emoji\"',\r\n            '\"Segoe UI Symbol\"',\r\n        ].join(','),\r\n        '&:focus': {\r\n            borderRadius: 4,\r\n            borderColor: '#80bdff',\r\n            boxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',\r\n        },\r\n    },\r\n}))(InputBase);\r\n\r\nconst PatientsForm = (props) => {\r\n    const { mode, defaultdata } = props\r\n    const classes = useStyles();\r\n    let navigate = useNavigate();\r\n    const test = ['โรคหัวใจ', 'โรคความดัน', 'โรคเบาหวาน', 'โรคสมอง'];\r\n    const [select, setSelect] = React.useState('')\r\n    const [status, setStatus] = React.useState('')\r\n    const [addPatient] = useMutation(ADD_PATIENT);\r\n    const [nationality, setNationality] = React.useState([])\r\n    const [selectNationality, setSelectNationality] = React.useState('')\r\n    const [selectRace, setSelectRace] = React.useState('')\r\n    \r\n    let data = require('npm-nationality-list')\r\n    \r\n    useEffect(() => {\r\n        if (mode === 'update') {\r\n            setSelect(defaultdata.patientById.bloodType)\r\n            setStatus(defaultdata.patientById.status)\r\n            setSelectNationality(defaultdata.patientById.nationality)\r\n            setSelectRace(defaultdata.patientById.race)\r\n        } else {\r\n            return null\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        data.getList().map((item) => setNationality((prev) => [...prev, item]))\r\n    }, [])\r\n\r\n    const onSubmitCreate =\r\n        useCallback(\r\n            async (value) => {\r\n                const variables = {\r\n                    record: {\r\n                        firstname: value.firstname,\r\n                        lastname: value.lastname,\r\n                        idcardNumber: value.idcardNumber,\r\n                        birthdate: value.birthdate,\r\n                        nationality: selectNationality,\r\n                        race: selectRace,\r\n                        status: status,\r\n                        bloodType: select,\r\n                        phone: value.phone,\r\n                        address: value.address,\r\n                        hospitalRefer: value.hospitalRefer,\r\n                        congenitalDisease: value.congenitalDisease,\r\n                    }\r\n                }\r\n                try {\r\n                    await addPatient({ variables, refetchQueries: [{ query: GET_PATIENTS }] })\r\n                    alert('บันทึกข้อมูลสำเร็จ')\r\n                    setSelectNationality('')\r\n                    setSelectRace('')\r\n                    navigate(`/app/patients`)\r\n                } catch (err) {\r\n                    console.log(err)\r\n                    alert('เกิดข้อผิดพลาด     '+err.message)\r\n                }\r\n            },\r\n            [addPatient, select]\r\n        )\r\n\r\n    const onSubmit = onSubmitCreate\r\n\r\n    const handleChangeblood = (event) => {\r\n        setSelect(event.target.value);\r\n    };\r\n\r\n    const handleChangestatus = (event) => {\r\n        setStatus(event.target.value)\r\n    }\r\n\r\n    const handleSelectNationality = (event) => {\r\n        setSelectNationality(event.target.value)\r\n    }\r\n    const handleSelectRace = (event) => {\r\n        setSelectRace(event.target.value)\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Form\r\n                onSubmit={onSubmit}\r\n                render={({ handleSubmit, submitting }) => (\r\n                    <form className={classes.root} noValidate autoComplete=\"true\" onSubmit={handleSubmit}>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={6}>\r\n                                {mode === 'update' ? (\r\n                                    <Field\r\n                                        fullWidth\r\n                                        required\r\n                                        name=\"firstname\"\r\n                                        component={TextField}\r\n                                        type=\"text\"\r\n                                        label=\"ชื่อ\"\r\n                                        variant=\"outlined\"\r\n                                        style={{ width: '100%' }}\r\n                                        initialValue={defaultdata.patientById.firstname}\r\n                                    />\r\n                                ) : (\r\n                                    <Field\r\n                                        fullWidth\r\n                                        required\r\n                                        name=\"firstname\"\r\n                                        component={TextField}\r\n                                        type=\"text\"\r\n                                        label=\"ชื่อ\"\r\n                                        variant=\"outlined\"\r\n                                        style={{ width: '100%' }}\r\n                                    />\r\n                                )}\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                {mode === 'update' ? (\r\n                                    <Field\r\n                                        name=\"lastname\"\r\n                                        variant=\"outlined\"\r\n                                        style={{ width: '100%' }}\r\n                                        required\r\n                                        component={TextField}\r\n                                        label=\"นามสกุล\"\r\n                                        initialValue={defaultdata.patientById.lastname}\r\n                                    />\r\n                                ) : (\r\n                                    <Field\r\n                                        name=\"lastname\"\r\n                                        variant=\"outlined\"\r\n                                        style={{ width: '100%' }}\r\n                                        required\r\n                                        component={TextField}\r\n                                        label=\"นามสกุล\"\r\n                                    />\r\n                                )}\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                {mode === 'update' ? (\r\n                                    <Field\r\n                                        label=\"รหัสบัตรประชาชน\"\r\n                                        type=\"text\"\r\n                                        variant=\"outlined\"\r\n                                        style={{ width: '100%' }}\r\n                                        required\r\n                                        name=\"idcardNumber\"\r\n                                        component={TextField}\r\n                                        initialValue={defaultdata.patientById.idcardNumber}\r\n                                    />\r\n                                ) : (\r\n                                    <Field\r\n                                        label=\"รหัสบัตรประชาชน\"\r\n                                        type=\"text\"\r\n                                        variant=\"outlined\"\r\n                                        style={{ width: '100%' }}\r\n                                        required    \r\n                                        name=\"idcardNumber\"\r\n                                        component={TextField}\r\n                                    />\r\n                                )}\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                {mode === 'update' ? (\r\n                                    <Field\r\n                                        id=\"date\"\r\n                                        type=\"date\"\r\n                                        label=\"วัน/เดือน/ปีเกิด\"\r\n                                        variant=\"outlined\"\r\n                                        style={{ width: '100%' }}\r\n                                        required={true}\r\n                                        component={TextField}\r\n                                        name='birthdate'\r\n                                        defaultValue={`${moment(defaultdata.patientById.birthdate).format(\"YYYY-MM-DD\")}`}\r\n                                    />\r\n                                ) : (\r\n                                    <Field\r\n                                        id=\"date\"\r\n                                        type=\"date\"\r\n                                        variant=\"outlined\"\r\n                                        label=\"วัน/เดือน/ปีเกิด\"\r\n                                        style={{ width: '100%' }}\r\n                                        required={true}\r\n                                        component={TextField}\r\n                                        name='birthdate'\r\n                                        defaultValue={`${moment(new Date() ).format(\"YYYY-MM-DD\")}`}\r\n                                    />\r\n                                )}\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <FormControl style={{ width: \"100%\" }}>\r\n                                    <FormLabel component=\"legend\">สัญชาติ</FormLabel>\r\n                                    <NativeSelect\r\n                                        id=\"demo-customized-select-native\"\r\n                                        input={<BootstrapInput />}\r\n                                        value={selectNationality}\r\n                                        onChange={handleSelectNationality}\r\n                                        required={true}\r\n                                    >   \r\n                                        <option aria-label=\"None\" value=\"\" />\r\n                                        {nationality?.map((data, index) => (\r\n                                            <option value={`${data.nationality}`}>\r\n                                                {data.nationality}\r\n                                            </option>\r\n                                        ))}\r\n                                    </NativeSelect>\r\n                                </FormControl>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <FormControl style={{ width: \"100%\" }}>\r\n                                    <FormLabel component=\"legend\">เชื้อชาติ</FormLabel>\r\n                                    <NativeSelect\r\n                                        id=\"demo-customized-select-native\"\r\n                                        input={<BootstrapInput />}\r\n                                        value={selectRace}\r\n                                        onChange={handleSelectRace}\r\n                                        required={true}\r\n                                    >   \r\n                                        <option aria-label=\"None\" value=\"\" />\r\n                                        {nationality?.map((data, index) => (\r\n                                            <option value={`${data.nationality}`}>\r\n                                                {data.nationality}\r\n                                            </option>\r\n                                        ))}\r\n                                    </NativeSelect>\r\n                                </FormControl>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <FormControl style={{ width: \"100%\" }}>\r\n                                    <FormLabel component=\"legend\">สถานะ</FormLabel>\r\n                                    <NativeSelect\r\n                                        id=\"demo-customized-select-native\"\r\n                                        input={<BootstrapInput />}\r\n                                        value={status}\r\n                                        onChange={handleChangestatus}\r\n                                        required={true}\r\n                                    >\r\n                                        <option aria-label=\"None\" value=\"เลือกสถานะ\" />\r\n                                        <option value={'SINGLE'}>โสด</option>\r\n                                        <option value={'MARRIED'}>สมรส</option>\r\n                                        <option value={'OTHER'}>อื่น ๆ</option>\r\n                                    </NativeSelect>\r\n                                </FormControl>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <FormControl style={{ width: \"100%\" }}>\r\n                                    <FormLabel component=\"legend\">กรุ๊ปเลือด</FormLabel>\r\n                                    <NativeSelect\r\n                                        id=\"demo-customized-select-native\"\r\n                                        input={<BootstrapInput />}\r\n                                        value={select}\r\n                                        onChange={handleChangeblood}\r\n                                        required={true}\r\n                                    >\r\n                                        <option aria-label=\"None\" value=\"\" />\r\n                                        <option value={'O'}>O</option>\r\n                                        <option value={'A'}>A</option>\r\n                                        <option value={'B'}>B</option>\r\n                                        <option value={'AB'}>AB</option>\r\n                                    </NativeSelect>\r\n                                </FormControl>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                {mode === 'update' ? (\r\n                                    <Field\r\n                                        label=\"เบอร์โทรศัพท์\"\r\n                                        type=\"text\"\r\n                                        variant=\"outlined\"\r\n                                        style={{ width: '100%' }}\r\n                                        required\r\n                                        name=\"phone\"\r\n                                        component={TextField}\r\n                                        initialValue={defaultdata.patientById.phone}\r\n                                    />\r\n                                ) : (\r\n                                    <Field\r\n                                        label=\"เบอร์โทรศัพท์\"\r\n                                        type=\"text\"\r\n                                        variant=\"outlined\"\r\n                                        style={{ width: '100%' }}\r\n                                        required\r\n                                        name=\"phone\"\r\n                                        component={TextField}\r\n                                    />\r\n                                )}\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                {mode === 'update' ? (\r\n                                    <Field\r\n                                        label=\"โรงพยาบาลที่ส่งต่อ\"\r\n                                        type=\"text\"\r\n                                        variant=\"outlined\"\r\n                                        style={{ width: '100%' }}\r\n                                        required\r\n                                        name=\"hospitalRefer\"\r\n                                        component={TextField}\r\n                                        initialValue={defaultdata.patientById.hospitalRefer}\r\n                                    />\r\n                                ) : (\r\n                                    <Field\r\n                                        label=\"โรงพยาบาลที่ส่งต่อ\"\r\n                                        type=\"text\"\r\n                                        variant=\"outlined\"\r\n                                        style={{ width: '100%' }}\r\n                                        required\r\n                                        name=\"hospitalRefer\"\r\n                                        component={TextField}\r\n                                    />\r\n                                )}\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                {mode === 'update' ? (\r\n                                    <Field\r\n                                        name=\"congenitalDisease\"\r\n                                        styling=\"field\"\r\n                                        labelname=\"โรคประจำตัว\"\r\n                                        component={MultiSelect}\r\n                                        variant=\"outlined\"\r\n                                        defaultValue={defaultdata.patientById.congenitalDisease}\r\n                                        renderValue={selected => (\r\n                                            <div className=\"multi-select-chips\">\r\n                                            {selected.map(value => (\r\n                                                <Chip\r\n                                                    key={value}\r\n                                                    label={value}\r\n                                                    className=\"multi-select-chip\"\r\n                                                />\r\n                                            ))}\r\n                                            </div>\r\n                                        )}\r\n                                        >\r\n                                        {test.map((data, index) => (\r\n                                            <MenuItem key={index} value={data}>\r\n                                                {data}\r\n                                            </MenuItem>\r\n                                        ))}\r\n                                    </Field>\r\n                                ):(\r\n                                    <Field\r\n                                        name=\"congenitalDisease\"\r\n                                        styling=\"field\"\r\n                                        labelname=\"โรคประจำตัว\"\r\n                                        component={MultiSelect}\r\n                                        variant=\"outlined\"\r\n                                        renderValue={selected => (\r\n                                            <div className=\"multi-select-chips\">\r\n                                            {selected.map(value => (\r\n                                                <Chip\r\n                                                    key={value}\r\n                                                    label={value}\r\n                                                    className=\"multi-select-chip\"\r\n                                                />\r\n                                            ))}\r\n                                            </div>\r\n                                        )}\r\n                                        >\r\n                                        {test.map((data, index) => (\r\n                                            <MenuItem key={index} value={data}>\r\n                                                {data}\r\n                                            </MenuItem>\r\n                                        ))}\r\n                                    </Field>\r\n                                )}\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                {mode === 'update' ? (\r\n                                    <Field\r\n                                        label=\"ที่อยู่\"\r\n                                        type=\"text\"\r\n                                        variant=\"outlined\"\r\n                                        style={{ width: '100%' }}\r\n                                        required\r\n                                        name=\"address\"\r\n                                        component={TextField}\r\n                                        initialValue={defaultdata.patientById.address}\r\n\r\n                                    />\r\n                                ) : (\r\n                                    <Field\r\n                                        label=\"ที่อยู่\"\r\n                                        type=\"text\"\r\n                                        variant=\"outlined\"\r\n                                        style={{ width: '100%' }}\r\n                                        required\r\n                                        name=\"address\"\r\n                                        component={TextField}\r\n                                    />\r\n                                )}\r\n                            </Grid>\r\n                            <Grid item xs={12} style={{ marginTop: 16, textAlign: 'center', width: '100%' }}>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    type=\"submit\"\r\n                                    disabled={submitting}\r\n                                >\r\n                            บันทึกข้อมูล\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n    )\r\n}\r\n/>\r\n        </React.Fragment >\r\n    )\r\n}\r\nexport default PatientsForm","B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Admins\\User-form.js",["170","171","172","173"],"import React, { useCallback, useEffect } from 'react'\r\nimport {\r\n    Grid,\r\n    FormControl,\r\n    NativeSelect,\r\n    InputBase,\r\n    InputLabel,\r\n    Button,\r\n} from '@material-ui/core';\r\nimport { Form, Field } from 'react-final-form';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport { TextField } from 'final-form-material-ui';\r\nimport { useMutation } from '@apollo/client';\r\nimport { ADD_USER, UPDATE_USER_BY_ID} from './GraphQL/Mutation'\r\nimport { GET_USERS } from './GraphQL/Querie'\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            width: '25ch',\r\n        },\r\n    },\r\n}));\r\n\r\nconst BootstrapInput = withStyles((theme) => ({\r\n    root: {\r\n        'label + &': {\r\n            marginTop: theme.spacing(3),\r\n        },\r\n    },\r\n    input: {\r\n        borderRadius: 4,\r\n        position: 'relative',\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '1px solid #ced4da',\r\n        fontSize: 16,\r\n        width: \"100%\",\r\n        padding: '10px 26px 10px 12px',\r\n        transition: theme.transitions.create(['border-color', 'box-shadow']),\r\n        fontFamily: [\r\n            '-apple-system',\r\n            'BlinkMacSystemFont',\r\n            '\"Segoe UI\"',\r\n            'Roboto',\r\n            '\"Helvetica Neue\"',\r\n            'Arial',\r\n            'sans-serif',\r\n            '\"Apple Color Emoji\"',\r\n            '\"Segoe UI Emoji\"',\r\n            '\"Segoe UI Symbol\"',\r\n        ].join(','),\r\n        '&:focus': {\r\n            borderRadius: 4,\r\n            borderColor: '#80bdff',\r\n            boxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',\r\n        },\r\n    },\r\n}))(InputBase);\r\n\r\nconst validate = values => {\r\n    const errors = {}\r\n    if (!values.firstName) {\r\n        errors.firstName = 'Required'\r\n    }\r\n    if (!values.lastName) {\r\n        errors.lastName = 'Required'\r\n    }\r\n    if (!values.email) {\r\n        errors.email = 'Required'\r\n    }\r\n    if (!values.tell) {\r\n        errors.tell = 'Required'\r\n    }\r\n    if (!values.password) {\r\n        errors.password = 'Required'\r\n    }\r\n    if (!values.username) {\r\n        errors.username = 'Required'\r\n    }\r\n    if (!values.address) {\r\n        errors.address = 'Required'\r\n    }\r\n    if (!values.address) {\r\n        errors.address = 'Required'\r\n    }\r\n    return errors\r\n}\r\n\r\n\r\n\r\nconst UserForm = (props) => {\r\n    \r\n    const {mode, defaultdata} = props\r\n    \r\n    let navigate = useNavigate();\r\n    const classes = useStyles();\r\n    const [select, setSelect] = React.useState('')\r\n   \r\n    const [addUser] = useMutation(ADD_USER);\r\n    const [updateUser] = useMutation(UPDATE_USER_BY_ID);\r\n    const handleChange = (event) => {\r\n        setSelect(event.target.value);\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        if(mode === 'update'){\r\n            setSelect(defaultdata.userById.roles)\r\n            console.log(defaultdata.userById)\r\n        }else{\r\n            return null\r\n        }\r\n    }, [])\r\n\r\n    const onSubmitCreate = useCallback(\r\n        async (value) => {\r\n            const variables = {\r\n                record: {\r\n                    username: value.username,\r\n                    email: value.email,\r\n                    firstname: value.firstName,\r\n                    lastname: value.lastName,\r\n                    phone: value.tell,\r\n                    roles: select,\r\n                    address: value.address,\r\n                    password: value.password,\r\n                    isStaff: true\r\n                }\r\n            }\r\n            try {\r\n                await addUser({ variables, refetchQueries: [{ query: GET_USERS }] })\r\n                setSelect('')\r\n                console.log('create')\r\n                alert('บันทึกข้อมูลสำเร็จ')\r\n                navigate(`/app/admin/`)\r\n            } catch (err) {\r\n                console.log(err)\r\n                alert('เกิดข้อผิดพลาด')\r\n            }\r\n        },\r\n        [addUser, select]\r\n    )\r\n    const onSubmitUpdate = useCallback(\r\n        async (value) => {\r\n            const variables = {\r\n                id: defaultdata.userById._id,\r\n                record: {\r\n                    username: value.username,\r\n                    email: value.email,\r\n                    firstname: value.firstName,\r\n                    lastname: value.lastName,\r\n                    phone: value.tell,\r\n                    roles: select,\r\n                    address: value.address,\r\n                    password: value.password,\r\n                    isStaff: true\r\n                }\r\n            }\r\n            try {\r\n                await updateUser({ variables, refetchQueries: [{ query: GET_USERS }] })\r\n                setSelect('')\r\n                alert('บันทึกข้อมูลสำเร็จ')\r\n                navigate(`/app/admin/`)\r\n            } catch (err) {\r\n                console.log(err)\r\n                alert('เกิดข้อผิดพลาด' + select)\r\n            }\r\n        },\r\n        [updateUser, select]\r\n    )\r\n    const onSubmit = mode === 'update' ? onSubmitUpdate : onSubmitCreate\r\n    return (\r\n        <React.Fragment>\r\n            <Form\r\n                onSubmit={onSubmit}\r\n                render={({ handleSubmit, submitting, submitError }) => {\r\n                    return (\r\n                        <form className={classes.root} noValidate autoComplete=\"true\" onSubmit={handleSubmit}>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={12}>\r\n                                {mode === 'update' ? (\r\n                                    <Field\r\n                                        fullWidth\r\n                                        required\r\n                                        name=\"username\"\r\n                                        component={TextField}\r\n                                        type=\"text\"\r\n                                        label=\"ยูซเซอร์เนม\"\r\n                                        variant=\"outlined\"\r\n                                        initialValue={defaultdata.userById.username}\r\n                                    />\r\n                                ): (\r\n                                    <Field\r\n                                        fullWidth\r\n                                        required\r\n                                        name=\"username\"\r\n                                        component={TextField}\r\n                                        type=\"text\"\r\n                                        label=\"ยูซเซอร์เนม\"\r\n                                        variant=\"outlined\"\r\n                                        style={{ width: '100%' }}\r\n                                    />\r\n                                )}\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                {mode === 'update' ? (\r\n                                   null\r\n                                ):(\r\n                                    <Field\r\n                                        name=\"password\"\r\n                                        variant=\"outlined\"\r\n                                        style={{ width: '100%' }}\r\n                                        required\r\n                                        type=\"password\"\r\n                                        component={TextField}\r\n                                        label=\"รหัส\"\r\n                                    />\r\n                                )}\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                {mode === \"update\" ? (\r\n                                     <Field\r\n                                        fullWidth\r\n                                        required\r\n                                        name=\"firstName\"\r\n                                        component={TextField}\r\n                                        type=\"text\"\r\n                                        label=\"ชื่อ\"\r\n                                        variant=\"outlined\"\r\n                                        style={{ width: '100%' }}\r\n                                        initialValue={defaultdata.userById.firstname}\r\n                                     />\r\n                                ):(\r\n                                    <Field\r\n                                        fullWidth\r\n                                        required\r\n                                        name=\"firstName\"\r\n                                        component={TextField}\r\n                                        type=\"text\"\r\n                                        label=\"ชื่อ\"\r\n                                        variant=\"outlined\"\r\n                                        style={{ width: '100%' }}\r\n                                    />\r\n                                )}\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                {mode === \"update\" ? (\r\n                                    <Field\r\n                                        name=\"lastName\"\r\n                                        variant=\"outlined\"\r\n                                        style={{ width: '100%' }}\r\n                                        required\r\n                                        component={TextField}\r\n                                        label=\"นามสกุล\"\r\n                                        initialValue={defaultdata.userById.lastname}\r\n                                    />\r\n                                ):(\r\n                                    <Field\r\n                                        name=\"lastName\"\r\n                                        variant=\"outlined\"\r\n                                        style={{ width: '100%' }}\r\n                                        required\r\n                                        component={TextField}\r\n                                        label=\"นามสกุล\"\r\n                                    />\r\n                                )}\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                {mode === 'update' ? (\r\n                                    <Field\r\n                                        label=\"เบอร์โทร\"\r\n                                        type=\"text\"\r\n                                        variant=\"outlined\"\r\n                                        style={{ width: '100%' }}\r\n                                        required\r\n                                        name=\"tell\"\r\n                                        component={TextField}\r\n                                        initialValue={defaultdata.userById.phone}\r\n                                    />\r\n                                ):(\r\n                                    <Field\r\n                                        label=\"เบอร์โทร\"\r\n                                        type=\"text\"\r\n                                        variant=\"outlined\"\r\n                                        style={{ width: '100%' }}\r\n                                        required\r\n                                        name=\"tell\"\r\n                                        component={TextField}\r\n                                    />\r\n                                )}\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                {mode === 'update' ? (\r\n                                     <Field\r\n                                        label=\"อีเมล\"\r\n                                        type=\"text\"\r\n                                        variant=\"outlined\"\r\n                                        style={{ width: '100%' }}\r\n                                        required\r\n                                        name=\"email\"\r\n                                        component={TextField}\r\n                                        initialValue={defaultdata.userById.email}\r\n                                     />\r\n                                ):(\r\n                                    <Field\r\n                                        label=\"อีเมล\"\r\n                                        type=\"text\"\r\n                                        variant=\"outlined\"\r\n                                        style={{ width: '100%' }}\r\n                                        required\r\n                                        name=\"email\"\r\n                                        component={TextField}\r\n                                    />\r\n                                )}\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                {mode === 'update' ? (\r\n                                    <Field\r\n                                        label=\"ที่อยู่\"\r\n                                        type=\"text\"\r\n                                        variant=\"outlined\"\r\n                                        style={{ width: '100%' }}\r\n                                        required\r\n                                        name=\"address\"\r\n                                        component={TextField}\r\n                                        multiline\r\n                                        rows={4}\r\n                                        initialValue={defaultdata.userById.address}\r\n                                     />\r\n                                ):(\r\n                                    <Field\r\n                                        label=\"ที่อยู่\"\r\n                                        type=\"text\"\r\n                                        variant=\"outlined\"\r\n                                        style={{ width: '100%' }}\r\n                                        required\r\n                                        name=\"address\"\r\n                                        component={TextField}\r\n                                        multiline\r\n                                        rows={4}\r\n                                    />\r\n                                )}\r\n                            </Grid>\r\n                            <Grid item xs={12} >\r\n                                {mode === 'update' ? (\r\n                                    <FormControl style={{ width: \"100%\" }}>\r\n                                        <InputLabel htmlFor=\"demo-customized-select-native\">หน้าที่</InputLabel>\r\n                                        <NativeSelect\r\n                                            id=\"demo-customized-select-native\"\r\n                                            input={<BootstrapInput />}\r\n                                            value={select}\r\n                                            onChange={handleChange}\r\n                                            required={true}\r\n                                        >\r\n                                            <option aria-label=\"None\" value=\"\" />\r\n                                            <option value={'DOCTOR'}>หมอ</option>\r\n                                            <option value={'NURSE'}>พยาบาล</option>\r\n                                            <option value={'STAFF'}>เจ้าหน้าที่</option>\r\n                                        </NativeSelect>\r\n                                    </FormControl>\r\n                                ):(\r\n                                    <FormControl style={{ width: \"100%\" }}>\r\n                                        <InputLabel htmlFor=\"demo-customized-select-native\">หน้าที่</InputLabel>\r\n                                        <NativeSelect\r\n                                            id=\"demo-customized-select-native\"\r\n                                            input={<BootstrapInput />}\r\n                                            value={select}\r\n                                            onChange={handleChange}\r\n                                            required={true}\r\n                                        >\r\n                                            <option aria-label=\"None\" value=\"\" />\r\n                                            <option value={'DOCTOR'}>หมอ</option>\r\n                                            <option value={'NURSE'}>พยาบาล</option>\r\n                                            <option value={'STAFF'}>เจ้าหน้าที่</option>\r\n                                        </NativeSelect>\r\n                                    </FormControl>\r\n                                )}\r\n                            </Grid>\r\n                            <Grid item xs={12} style={{ marginTop: 16, textAlign: 'center', width: '100%' }}>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    type=\"submit\"\r\n                                    disabled={submitting}\r\n                                >\r\n                                    บันทึกข้อมูล\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                    )\r\n                }}\r\n            />\r\n        </React.Fragment>\r\n    )\r\n}\r\nexport default UserForm\r\n\r\n","B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Admins\\GraphQL\\Querie.js",[],"B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Patients\\GraphQL\\Querie.js",[],"B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\components\\Navbar\\Sidebar.js",["174","175"],"B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Patients\\GraphQL\\Mutation.js",[],"B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Admins\\GraphQL\\Mutation.js",[],"B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\MulitiSelect.jsx",["176"],"import React from \"react\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n      width: 250\r\n    }\r\n  }\r\n};\r\n\r\nexport default ({\r\n  input: { value, name, onChange, ...restInput },\r\n  meta,\r\n  ...rest\r\n}) => (\r\n  <FormControl className={rest.styling}>\r\n    <InputLabel htmlFor=\"select-multiple-chip\">{rest.labelname}</InputLabel>\r\n    <Select\r\n      MenuProps={MenuProps}\r\n      multiple\r\n      displayEmpty\r\n      {...rest}\r\n      name={name}\r\n      inputProps={restInput}\r\n      error={meta.error && meta.touched}\r\n      onChange={onChange}\r\n      value={[...value]}\r\n    />\r\n  </FormControl>\r\n);\r\n","B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Treatment\\Create.js",["177","178"],"import React from 'react';\r\nimport { Box, Grid, Typography, Button } from '@material-ui/core';\r\nimport { InfoCard } from '@mystiny/ui';\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\nimport { useNavigate, useParams} from 'react-router-dom';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport { green } from '@material-ui/core/colors';\r\nimport { useQuery } from '@apollo/client';\r\nimport {GET_PATIENT} from '../Patients/GraphQL/Querie'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    create: {\r\n      backgroundColor: green[500],\r\n      '&:hover': {\r\n        backgroundColor: green[700],\r\n      },\r\n    },\r\n  }));\r\n\r\n\r\nconst CreateTreatmentPage = () => {\r\n    const navigate = useNavigate();\r\n    const classes = useStyles();\r\n    let { id } = useParams();\r\n    const { loading, error, data } = useQuery(GET_PATIENT, {\r\n        variables: {\r\n            id\r\n        },\r\n        fetchPolicy: 'cache-and-network',\r\n    });\r\n\r\n    if (loading) return \"...Loading\";\r\n    if (error) return `Error! ${error}`;\r\n    return (\r\n        <React.Fragment>\r\n            <Box >\r\n                <Grid container spacing={0} alignItems=\"center\" justify=\"center\">\r\n                    <Grid item xs={6}>\r\n                        <Typography paragraph style={{ fontWeight: 'bold', fontSize: '2em' }} >\r\n                            <DescriptionIcon color=\"primary\" fontSize=\"small\" /> สร้างประวัติการรักษา\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={6} align='right'>\r\n                        <Box style={{ alignItems: 'center', justifyContent: 'flex-end' }}>\r\n\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <InfoCard title={\r\n                            <React.Fragment>\r\n                                <Typography paragraph style={{ fontSize: '1em'}} >\r\n                                   ข้อมูลผู้ป่วย\r\n                                    <Button variant=\"contained\" color=\"secondary\" onClick={() => navigate(-1)} style={{marginLeft: 20}} className={classes.create}>\r\n                                        ดูข้อมูลเพิ่มเติม\r\n                                    </Button>\r\n                                </Typography>\r\n                            </React.Fragment>\r\n                        }>\r\n                            <Grid container spacing={2}>\r\n                                <Grid item xs={6}>\r\n\r\n                                </Grid>\r\n                            </Grid>\r\n                        </InfoCard>\r\n                    </Grid>\r\n                    {/* <Grid item xs={12}>\r\n                        <InfoCard title='ประวัติการรักษา' actionTopRight={\r\n                            <Button variant=\"contained\" color=\"secondary\" onClick={() => navigate(-1)}>\r\n                                ย้อนกลับ\r\n                            </Button>\r\n                        }>\r\n                        </InfoCard>\r\n                    </Grid> */}\r\n                </Grid>\r\n            </Box>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default CreateTreatmentPage","B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Medicine\\Prescription\\Prescription.js",[],"B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Medicine\\DrugStore\\Create.js",[],"B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Medicine\\DrugStore\\Medicine.js",["179"],"B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Medicine\\DrugStore\\Medicine-form.js",["180","181","182","183","184","185","186","187","188","189","190","191"],"B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Medicine\\DrugStore\\graphql\\Mutation.js",[],"B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Medicine\\DrugStore\\Detail.js",["192"],"B:\\Learn\\semester3.2\\Cloud\\CTHS_React-master\\src\\pages\\Medicine\\DrugStore\\graphql\\Queries.js",[],{"ruleId":"193","replacedBy":"194"},{"ruleId":"195","replacedBy":"196"},{"ruleId":"197","severity":1,"message":"198","line":70,"column":13,"nodeType":"199","endLine":70,"endColumn":76},{"ruleId":"197","severity":1,"message":"198","line":48,"column":11,"nodeType":"199","endLine":48,"endColumn":74},{"ruleId":"200","severity":1,"message":"201","line":2,"column":47,"nodeType":"202","messageId":"203","endLine":2,"endColumn":57},{"ruleId":"200","severity":1,"message":"204","line":1,"column":41,"nodeType":"202","messageId":"203","endLine":1,"endColumn":49},{"ruleId":"200","severity":1,"message":"205","line":4,"column":5,"nodeType":"202","messageId":"203","endLine":4,"endColumn":15},{"ruleId":"200","severity":1,"message":"206","line":6,"column":5,"nodeType":"202","messageId":"203","endLine":6,"endColumn":15},{"ruleId":"200","severity":1,"message":"207","line":7,"column":5,"nodeType":"202","messageId":"203","endLine":7,"endColumn":21},{"ruleId":"200","severity":1,"message":"208","line":14,"column":5,"nodeType":"202","messageId":"203","endLine":14,"endColumn":15},{"ruleId":"200","severity":1,"message":"209","line":18,"column":10,"nodeType":"202","messageId":"203","endLine":18,"endColumn":27},{"ruleId":"200","severity":1,"message":"210","line":19,"column":21,"nodeType":"202","messageId":"203","endLine":19,"endColumn":26},{"ruleId":"200","severity":1,"message":"211","line":19,"column":28,"nodeType":"202","messageId":"203","endLine":19,"endColumn":34},{"ruleId":"212","severity":1,"message":"213","line":107,"column":8,"nodeType":"214","endLine":107,"endColumn":10,"suggestions":"215"},{"ruleId":"212","severity":1,"message":"216","line":111,"column":8,"nodeType":"214","endLine":111,"endColumn":10,"suggestions":"217"},{"ruleId":"212","severity":1,"message":"218","line":143,"column":13,"nodeType":"214","endLine":143,"endColumn":33,"suggestions":"219"},{"ruleId":"200","severity":1,"message":"220","line":61,"column":7,"nodeType":"202","messageId":"203","endLine":61,"endColumn":15},{"ruleId":"212","severity":1,"message":"221","line":114,"column":8,"nodeType":"214","endLine":114,"endColumn":10,"suggestions":"222"},{"ruleId":"212","severity":1,"message":"223","line":142,"column":9,"nodeType":"214","endLine":142,"endColumn":26,"suggestions":"224"},{"ruleId":"212","severity":1,"message":"225","line":170,"column":9,"nodeType":"214","endLine":170,"endColumn":29,"suggestions":"226"},{"ruleId":"200","severity":1,"message":"204","line":1,"column":28,"nodeType":"202","messageId":"203","endLine":1,"endColumn":36},{"ruleId":"212","severity":1,"message":"227","line":72,"column":5,"nodeType":"214","endLine":72,"endColumn":24,"suggestions":"228"},{"ruleId":"229","severity":1,"message":"230","line":17,"column":1,"nodeType":"231","endLine":36,"endColumn":3},{"ruleId":"200","severity":1,"message":"232","line":6,"column":22,"nodeType":"202","messageId":"203","endLine":6,"endColumn":32},{"ruleId":"200","severity":1,"message":"233","line":25,"column":29,"nodeType":"202","messageId":"203","endLine":25,"endColumn":33},{"ruleId":"200","severity":1,"message":"234","line":69,"column":7,"nodeType":"202","messageId":"203","endLine":69,"endColumn":11},{"ruleId":"200","severity":1,"message":"205","line":4,"column":2,"nodeType":"202","messageId":"203","endLine":4,"endColumn":12},{"ruleId":"200","severity":1,"message":"235","line":5,"column":2,"nodeType":"202","messageId":"203","endLine":5,"endColumn":10},{"ruleId":"200","severity":1,"message":"206","line":6,"column":2,"nodeType":"202","messageId":"203","endLine":6,"endColumn":12},{"ruleId":"200","severity":1,"message":"207","line":7,"column":2,"nodeType":"202","messageId":"203","endLine":7,"endColumn":18},{"ruleId":"200","severity":1,"message":"236","line":9,"column":2,"nodeType":"202","messageId":"203","endLine":9,"endColumn":11},{"ruleId":"200","severity":1,"message":"237","line":11,"column":2,"nodeType":"202","messageId":"203","endLine":11,"endColumn":6},{"ruleId":"200","severity":1,"message":"210","line":18,"column":21,"nodeType":"202","messageId":"203","endLine":18,"endColumn":26},{"ruleId":"200","severity":1,"message":"211","line":18,"column":28,"nodeType":"202","messageId":"203","endLine":18,"endColumn":34},{"ruleId":"200","severity":1,"message":"238","line":79,"column":7,"nodeType":"202","messageId":"203","endLine":79,"endColumn":22},{"ruleId":"212","severity":1,"message":"239","line":113,"column":5,"nodeType":"214","endLine":113,"endColumn":7,"suggestions":"240"},{"ruleId":"212","severity":1,"message":"223","line":137,"column":3,"nodeType":"214","endLine":137,"endColumn":25,"suggestions":"241"},{"ruleId":"212","severity":1,"message":"242","line":162,"column":3,"nodeType":"214","endLine":162,"endColumn":28,"suggestions":"243"},{"ruleId":"200","severity":1,"message":"244","line":21,"column":8,"nodeType":"202","messageId":"203","endLine":21,"endColumn":15},"no-native-reassign",["245"],"no-negated-in-lhs",["246"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'IconButton' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'Typography' is defined but never used.","'RadioGroup' is defined but never used.","'FormControlLabel' is defined but never used.","'InputLabel' is defined but never used.","'CountryRegionData' is defined but never used.","'Radio' is defined but never used.","'Select' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'defaultdata.patientById.bloodType', 'defaultdata.patientById.nationality', 'defaultdata.patientById.race', 'defaultdata.patientById.status', and 'mode'. Either include them or remove the dependency array.","ArrayExpression",["247"],"React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array.",["248"],"React Hook useCallback has missing dependencies: 'navigate', 'selectNationality', 'selectRace', and 'status'. Either include them or remove the dependency array.",["249"],"'validate' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'defaultdata.userById' and 'mode'. Either include them or remove the dependency array.",["250"],"React Hook useCallback has a missing dependency: 'navigate'. Either include it or remove the dependency array.",["251"],"React Hook useCallback has missing dependencies: 'defaultdata.userById._id' and 'navigate'. Either include them or remove the dependency array.",["252"],"React Hook useEffect has missing dependencies: 'onMobileClose' and 'openMobile'. Either include them or remove the dependency array. If 'onMobileClose' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["253"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'withStyles' is defined but never used.","'data' is assigned a value but never used.","'rows' is assigned a value but never used.","'MenuItem' is defined but never used.","'FormLabel' is defined but never used.","'Chip' is defined but never used.","'normalizeAmount' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'defaultdata.medicineById' and 'mode'. Either include them or remove the dependency array.",["254"],["255"],"React Hook useCallback has missing dependencies: 'defaultdata.medicineById._id' and 'navigate'. Either include them or remove the dependency array.",["256"],"'classes' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"257","fix":"258"},{"desc":"259","fix":"260"},{"desc":"261","fix":"262"},{"desc":"263","fix":"264"},{"desc":"265","fix":"266"},{"desc":"267","fix":"268"},{"desc":"269","fix":"270"},{"desc":"271","fix":"272"},{"desc":"273","fix":"274"},{"desc":"275","fix":"276"},"Update the dependencies array to be: [defaultdata.patientById.bloodType, defaultdata.patientById.nationality, defaultdata.patientById.race, defaultdata.patientById.status, mode]",{"range":"277","text":"278"},"Update the dependencies array to be: [data]",{"range":"279","text":"280"},"Update the dependencies array to be: [addPatient, navigate, select, selectNationality, selectRace, status]",{"range":"281","text":"282"},"Update the dependencies array to be: [defaultdata.userById, mode]",{"range":"283","text":"284"},"Update the dependencies array to be: [addUser, navigate, select]",{"range":"285","text":"286"},"Update the dependencies array to be: [defaultdata.userById._id, select, updateUser, navigate]",{"range":"287","text":"288"},"Update the dependencies array to be: [location.pathname, onMobileClose, openMobile]",{"range":"289","text":"290"},"Update the dependencies array to be: [defaultdata.medicineById, mode]",{"range":"291","text":"292"},"Update the dependencies array to be: [addMedicine, metType, navigate]",{"range":"293","text":"294"},"Update the dependencies array to be: [defaultdata.medicineById._id, metType, updateMedicine, navigate]",{"range":"295","text":"296"},[3227,3229],"[defaultdata.patientById.bloodType, defaultdata.patientById.nationality, defaultdata.patientById.race, defaultdata.patientById.status, mode]",[3345,3347],"[data]",[4649,4669],"[addPatient, navigate, select, selectNationality, selectRace, status]",[3002,3004],"[defaultdata.userById, mode]",[3959,3976],"[addUser, navigate, select]",[4955,4975],"[defaultdata.userById._id, select, updateUser, navigate]",[1832,1851],"[location.pathname, onMobileClose, openMobile]",[2638,2640],"[defaultdata.medicineById, mode]",[3202,3224],"[addMedicine, metType, navigate]",[3822,3847],"[defaultdata.medicineById._id, metType, updateMedicine, navigate]"]